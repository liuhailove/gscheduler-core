<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tc.gschedulercore.dao.JobLogDao">

    <resultMap id="JobLog" type="com.tc.gschedulercore.core.model.JobLog">
        <result column="id" property="id"/>

        <result column="job_group" property="jobGroup"/>
        <result column="job_id" property="jobId"/>

        <result column="executor_address" property="executorAddress"/>
        <result column="executor_handler" property="executorHandler"/>
        <result column="executor_param" property="executorParam"/>
        <result column="executor_sharding_param" property="executorShardingParam"/>
        <result column="executor_fail_retry_count" property="executorFailRetryCount"/>

        <result column="trigger_time" property="triggerTime"/>
        <result column="trigger_code" property="triggerCode"/>
        <result column="trigger_msg" property="triggerMsg"/>

        <result column="handle_time" property="handleTime"/>
        <result column="handle_code" property="handleCode"/>
        <result column="handle_msg" property="handleMsg"/>

        <result column="alarm_status" property="alarmStatus"/>
        <result column="executor_fail_trigger_time" property="executorFailTriggerTime"/>
        <result column="executor_threshold_timeout" property="executorThresholdTimeout"/>
        <result column="alarm_threshold_status" property="alarmThresholdStatus"/>
        <result column="log_type" property="logType"/>
        <result column="trigger_type" property="triggerType"/>
        <result column="parent_log" property="parentLog"/>
        <result column="has_sub" property="hasSub"/>
        <result column="execute_time" property="executeTime"/>
        <result column="instance_id" property="instanceId"/>
        <result column="task_termination_flag" property="taskTerminationFlag"/>
        <result column="job_name" property="jobName"/>
        <result column="tag_name" property="tagName"/>
        <result column="children_executor_params" property="childrenExecutorParams"/>
        <result column="dispatch_sub" property="dispatchSub"/>
        <result column="start_execute_time_in_ms" property="startExecuteTimeInMs"/>
    </resultMap>

    <sql id="Base_Column_List">
        t
        .
        id
        ,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status,
        t.executor_threshold_timeout,
		t.executor_fail_trigger_time,
        t.alarm_threshold_status,
        t.log_type,
        t.trigger_type,
        t.parent_log,
        t.has_sub,
        t.execute_time,
        t.instance_id,
        t.job_name,
        t.task_termination_flag,
        t.tag_name
    </sql>

    <sql id="Base2_Column_List">
        t.id,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status,
        t.executor_threshold_timeout,
		t.executor_fail_trigger_time,
        t.alarm_threshold_status,
        t.log_type,
        t.trigger_type,
        t.parent_log,
        t.has_sub,
        t.execute_time,
        t.instance_id,
        t.job_name,
        t.tag_name,
        t.children_executor_params,
        t.task_termination_flag,
        t.dispatch_sub,
        t.start_execute_time_in_ms
    </sql>

    <select id="pageList" resultMap="JobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM gs_job_log AS t
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroups!=null and jobGroups.size()>0">
                AND t.job_group IN
                <foreach collection="jobGroups" close=")" item="id" open="(" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test="jobGroup gt 0">
                AND t.job_group = #{jobGroup}
            </if>
            <if test="jobId gt 0">
                AND t.job_id = #{jobId}
            </if>
            <if test="logId gt 0">
                AND t.id = #{logId}
            </if>
            <if test="triggerTimeStart != null">
                AND t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
            </if>
            <if test="triggerTimeEnd != null">
                AND t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
            </if>
            <if test="excludeTimeStart != null and excludeTimeEnd != null">
                AND t.trigger_time not between #{excludeTimeStart} and #{excludeTimeEnd}
            </if>
            <if test="logStatus == 1">
                AND t.handle_code = 200
            </if>
            <if test="logStatus == 2">
                AND (
                t.trigger_code NOT IN (0, 200) OR
                t.handle_code NOT IN (0, 200)
                )
            </if>
            <if test="logStatus == 3">
                AND t.trigger_code = 200
                AND t.handle_code = 0
            </if>
            <if test="parentLog>=0">
                AND t.parent_log = #{parentLog}
            </if>
            <if test="handleMsg != null and handleMsg != '' ">
                AND t.handle_msg like CONCAT('%',#{handleMsg,jdbcType=VARCHAR},'%')
            </if>
            <if test="instanceId != null and instanceId != ''">
                AND t.instance_id =#{instanceId}
            </if>
            <if test="tagName != null and tagName != ''">
                AND t.tag_name like CONCAT('%',#{tagName,jdbcType=VARCHAR},'%')
            </if>
        </trim>
        ORDER BY t.trigger_time DESC,
        t.job_id DESC
        <if test="executeTimeAsc != null and executeTimeAsc==true">
            , t.execute_time ASC
        </if>
        <if test="executeTimeAsc != null and executeTimeAsc==false">
            , t.execute_time DESC
        </if>
        LIMIT #{offset}, #{pagesize}
    </select>

    <select id="pageListCount" resultType="int">
        SELECT count(1)
        FROM gs_job_log AS t
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroups!=null and jobGroups.size()>0">
                AND t.job_group IN
                <foreach collection="jobGroups" close=")" item="id" open="(" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test="jobGroup gt 0">
                AND t.job_group = #{jobGroup}
            </if>
            <if test="jobId gt 0">
                AND t.job_id = #{jobId}
            </if>
            <if test="logId gt 0">
                AND t.id = #{logId}
            </if>
            <if test="triggerTimeStart != null">
                AND t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart}
            </if>
            <if test="triggerTimeEnd != null">
                AND t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd}
            </if>
            <if test="logStatus == 1">
                AND t.handle_code = 200
            </if>
            <if test="logStatus == 2">
                AND (
                t.trigger_code NOT IN (0, 200) OR
                t.handle_code NOT IN (0, 200)
                )
            </if>
            <if test="logStatus == 3">
                AND t.trigger_code = 200
                AND t.handle_code = 0
            </if>
            <if test="parentLog>=0">
                AND t.parent_log = #{parentLog}
            </if>
            <if test="handleMsg != null and handleMsg != '' ">
                AND t.handle_msg like CONCAT('%',#{handleMsg,jdbcType=VARCHAR},'%')
            </if>
            <if test="instanceId != null and instanceId != ''">
                AND t.instance_id =#{instanceId}
            </if>
            <if test="tagName != null and tagName != ''">
                AND t.tag_name like CONCAT('%',#{tagName,jdbcType=VARCHAR},'%')
            </if>
        </trim>
    </select>

    <select id="load" parameterType="java.util.HashMap" resultMap="JobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.id = #{id} AND
        t.job_group = #{jobGroup}
    </select>

    <select id="loadBy" parameterType="java.lang.Long" resultMap="JobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.id = #{id}
    </select>

    <select id="loadLog" resultMap="JobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.job_group = #{jobGroup} AND
        t.job_id = #{jobId} AND
        t.instance_id = #{instanceId} AND
        t.parent_log = #{parentLog} AND
        t.executor_param = #{executorParam}
        LIMIT 1
    </select>

    <select id="query10Process" parameterType="java.util.HashMap" resultMap="JobLog">
        SELECT
        <include refid="Base2_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.handle_code = 201 AND
        t.children_executor_params <![CDATA[ <> ]]> '' AND
        t.children_executor_params is not null AND
        t.handle_time <![CDATA[ <= ]]> #{maxHandleTime} AND
        t.handle_time <![CDATA[ >= ]]> #{minHandleTime}
        limit 10
    </select>

    <select id="loadForUpdate" parameterType="java.lang.Long" resultMap="JobLog">
        SELECT
        <include refid="Base_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.id = #{id}
        FOR UPDATE
    </select>


    <insert id="save" parameterType="com.tc.gschedulercore.core.model.JobLog" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO gs_job_log (`job_group`,
                                `job_id`,
                                `trigger_time`,
                                `trigger_code`,
                                `handle_code`,
                                `executor_threshold_timeout`,
                                `alarm_threshold_status`,
                                `log_type`,
                                `trigger_type`,
                                `parent_log`,
                                `instance_id`,
                                `job_name`,
                                `executor_fail_retry_count`,
                                `start_execute_time_in_ms`,
                                `executor_param`)
        VALUES (#{jobGroup},
                #{jobId},
                #{triggerTime},
                #{triggerCode},
                #{handleCode},
                #{executorThresholdTimeout},
                #{alarmThresholdStatus},
                #{logType},
                #{triggerType},
                #{parentLog},
                #{instanceId},
                #{jobName},
                #{executorFailRetryCount},
                #{startExecuteTimeInMs},
                #{executorParam})
    </insert>

    <update id="updateTriggerInfo">
        UPDATE gs_job_log
        SET `trigger_time`= #{triggerTime},
            `trigger_code`= #{triggerCode},
            `trigger_msg`= #{triggerMsg},
            `executor_address`= #{executorAddress},
            `executor_handler`=#{executorHandler},
            `executor_param`= #{executorParam},
            `executor_sharding_param`= #{executorShardingParam},
            `executor_fail_retry_count`= #{executorFailRetryCount},
            `executor_fail_trigger_time`=#{executorFailTriggerTime},
            `alarm_threshold_status`=#{alarmThresholdStatus},
            `executor_threshold_timeout`=#{executorThresholdTimeout},
            `has_sub` = #{hasSub}
        WHERE `id` = #{id}
          AND `job_group` = #{jobGroup}
    </update>
    <update id="updateHandleInfo">
        UPDATE gs_job_log
        SET `handle_time`= #{handleTime},
            `handle_code`= #{handleCode},
            `handle_msg`= #{handleMsg},
            `executor_fail_trigger_time`=#{executorFailTriggerTime},
            `has_sub`=#{hasSub},
            `children_executor_params`=#{childrenExecutorParams},
            `execute_time`=#{executeTime},
            `tag_name`=#{tagName},
            `dispatch_sub`=#{dispatchSub}
        WHERE `id` = #{id}
          AND `job_group` = #{jobGroup}
    </update>

    <update id="updateTaskTerminationFlag">
        UPDATE gs_job_log
        SET `task_termination_flag` = #{taskTerminationFlag}
        WHERE `id` = #{logId}
    </update>

    <update id="updateHasSub">
        UPDATE gs_job_log
        SET `has_sub`=#{hasSub}
        WHERE `id` = #{id}
          AND `job_group` = #{jobGroup}
    </update>
    <delete id="delete">
        delete
        from gs_job_log
        WHERE `job_group` = #{jobGroup}
          AND job_id = #{jobId}
    </delete>

    <select id="findLogReport" resultType="java.util.Map">
        SELECT COUNT(handle_code)                                    triggerDayCount,
               SUM(
                       CASE
                           WHEN (trigger_code in (0, 200) and (handle_code = 0 OR handle_code = 201)) then 1
                           else 0 end)                            as triggerDayCountRunning,
               SUM(CASE WHEN handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
        FROM gs_job_log
        WHERE trigger_time BETWEEN #{from} and #{to}
          AND job_group = #{jobGroup}
          AND job_id = #{jobId}
    </select>

    <select id="findClearLogIds" resultType="long">
        SELECT id FROM gs_job_log
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroup gt 0">
                AND job_group = #{jobGroup}
            </if>
            <if test="jobId gt 0">
                AND job_id = #{jobId}
            </if>
            <if test="clearBeforeTime != null">
                AND trigger_time <![CDATA[ <= ]]> #{clearBeforeTime}
            </if>
            <if test="clearBeforeNum gt 0">
                AND id NOT in(
                SELECT id FROM(
                SELECT id FROM gs_job_log AS t
                <trim prefix="WHERE" prefixOverrides="AND | OR">
                    <if test="jobGroup gt 0">
                        AND t.job_group = #{jobGroup}
                    </if>
                    <if test="jobId gt 0">
                        AND t.job_id = #{jobId}
                    </if>
                </trim>
                ORDER BY t.trigger_time desc
                LIMIT 0, #{clearBeforeNum}
                ) t1
                )
            </if>
        </trim>
        LIMIT #{pagesize}
    </select>

    <delete id="clearLog" parameterType="java.util.HashMap">
        delete from gs_job_log
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroup gt 0">
                AND job_group = #{jobGroup}
            </if>
            <if test="logIds!=null and logIds.size()>0">
                AND id in
                <foreach collection="logIds" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </trim>
    </delete>

    <delete id="deleteLog" parameterType="java.util.HashMap">
        delete from gs_job_log
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="jobGroup gt 0">
                AND job_group = #{jobGroup}
            </if>
            <if test="jobId gt 0">
                AND job_id = #{jobId}
            </if>
            <if test="clearBeforeTime != null">
                AND trigger_time <![CDATA[ <= ]]> #{clearBeforeTime}
            </if>
        </trim>
        LIMIT #{pagesize}
    </delete>

    <select id="findFailJobLogIds" resultType="long">
        SELECT id
        FROM `gs_job_log`
        WHERE !(
            (trigger_code in (0
            , 200)
          and handle_code = 0)
           OR (handle_code = 200)
           OR (handle_code = 201)
            )
          AND `alarm_status` = 0
          AND `job_group` = #{jobGroup}
          AND executor_fail_trigger_time <![CDATA[ <= ]]> #{maxExecutorFailTriggerTime}
          AND executor_fail_trigger_time <![CDATA[ >= ]]> #{minExecutorFailTriggerTime} LIMIT #{pagesize}
    </select>

    <select id="findThresholdTimeoutJobLogIds" resultType="long">
        SELECT id
        FROM `gs_job_log`
        WHERE (trigger_code = 200 and handle_code = 0)
          AND `alarm_threshold_status` = 0
          and (executor_threshold_timeout <![CDATA[ <= ]]> #{currentTime})
          and (executor_threshold_timeout <![CDATA[ > ]]> 0)
          and job_group = #{jobGroup} LIMIT #{pagesize}
    </select>

    <select id="getTaskActualRunNumbers" resultType="int">
        SELECT count(*)
        FROM `gs_job_log`
        WHERE job_group = #{jobGroupId}
          and job_id = #{jobId}
          and trigger_time <![CDATA[ < ]]> #{currentExecTime}
          and trigger_time <![CDATA[ >= ]]> #{yesterdayExecTime} LIMIT #{pagesize}
    </select>

    <select id="queryJobExecuteNumber" resultType="int">
        SELECT count(*)
        FROM `gs_job_log`
        WHERE job_group = #{jobGroupId}
          and job_id = #{jobId}
          and trigger_time <![CDATA[ <= ]]> #{toTime}
          and trigger_time <![CDATA[ >= ]]> #{fromTime}
          and trigger_type = #{triggerType} LIMIT 1
    </select>

    <update id="updateAlarmStatus">
        UPDATE gs_job_log
        SET `alarm_status` = #{newAlarmStatus}
        WHERE `id` = #{logId}
          AND `alarm_status` = #{oldAlarmStatus}
          AND `job_group` = #{jobGroup}
    </update>

    <update id="update2Processing">
        UPDATE gs_job_log
        SET `handle_code`              = #{newHandleStatus},
            `handle_time`              = #{handleTime},
            `children_executor_params` = #{childrenExecutorParams}
        WHERE `id` = #{logId}
          AND `handle_code` = #{oldHandleStatus}
          AND `job_group` = #{jobGroup}
    </update>

    <update id="updateThresholdAlarmStatus">
        UPDATE gs_job_log
        SET `alarm_threshold_status` = #{newAlarmStatus}
        WHERE `id` = #{logId}
          AND `alarm_threshold_status` = #{oldAlarmStatus}
    </update>

    <select id="findLostJobIds" resultType="long">
        SELECT t.id
        FROM gs_job_log AS t
        WHERE t.trigger_code = 200
          and t.handle_code = 0
          and t.trigger_time <![CDATA[ <= ]]> #{losedTime}
          and t.job_group = #{jobGroup}
          and t.executor_address not in (SELECT t2.registry_value
                                         FROM gs_job_registry AS t2)
    </select>

    <select id="countStatusShardingBy" resultType="int">
        SELECT count(1)
        FROM gs_job_log AS t
        WHERE t.instance_id = #{instanceId}
        and t.job_group = #{jobGroup}
        AND t.job_id = #{jobId}
        AND t.handle_code IN
        <foreach collection="handleCodes" close=")" item="handleCode" open="(" separator=",">
            ${handleCode}
        </foreach>
    </select>

    <select id="findOneJobLog" resultMap="JobLog">
        SELECT count(1)
        FROM gs_job_log AS t
        WHERE t.instance_id = #{instanceId}
        and t.job_group = #{jobGroup}
        AND t.job_id = #{jobId}
        AND t.handle_code IN
        <foreach collection="handleCodes" close=")" item="handleCode" open="(" separator=",">
            ${handleCode}
        </foreach>
        LIMIT 1
    </select>

    <select id="countDispatchShardingBy" resultType="int">
        SELECT count(1)
        FROM gs_job_log AS t
        WHERE t.instance_id = #{instanceId}
          and t.job_group = #{jobGroup}
          AND t.job_id = #{jobId}
          AND t.`dispatch_sub` = #{dispatchSub}

    </select>

    <select id="countStatusBy" resultType="int">
        SELECT count(1)
        FROM gs_job_log AS t
        WHERE t.instance_id=#{instanceId}
        AND t.job_id IN
        <foreach collection="parentJobs" close=")" item="jobId" open="(" separator=",">
            ${jobId}
        </foreach>
        AND t.handle_code  <![CDATA[ >= ]]> #{handleCode}
    </select>
    <update id="updateDispatchedBy">
        UPDATE gs_job_log
        SET `dispatch_sub` = 1
        WHERE instance_id=#{instanceId}
        AND job_id IN
        <foreach collection="parentJobs" close=")" item="jobId" open="(" separator=",">
            ${jobId}
        </foreach>
        AND handle_code = #{handleCode}
    </update>
    <select id="queryList" resultMap="JobLog">
        SELECT
        <include refid="Base2_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.instance_id=#{instanceId}
        and t.job_group = #{jobGroup}
        AND t.job_id =#{jobId}
        AND t.handle_code IN
        <foreach collection="handleCodes" close=")" item="handleCode" open="(" separator=",">
            ${handleCode}
        </foreach>
    </select>

    <select id="queryLogIdes" resultType="long">
        SELECT t.id
        FROM gs_job_log AS t
        WHERE t.instance_id = #{instanceId}
          AND t.job_id = #{jobId}
          AND t.job_group = #{jobGroup}
    </select>

    <select id="findOneWaitDispatch" resultMap="JobLog">
        SELECT
        <include refid="Base2_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.dispatch_sub=1 AND
        t.handle_code = 200
        ORDER BY trigger_time DESC
        limit 1
    </select>

    <select id="findLatestGreatThanLog" resultMap="JobLog">
        SELECT
        <include refid="Base2_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.trigger_code = 200 AND
        t.job_group = #{jobGroup} AND
        t.job_id = #{jobId} AND
        t.trigger_time <![CDATA[ > ]]> #{greaterThanTime}
        ORDER BY t.trigger_time DESC
        limit 1
    </select>


    <update id="updateDispatchSub">
        UPDATE gs_job_log
        SET `dispatch_sub` = #{newDispatchSub}
        WHERE `instance_id` = #{instanceId}
        AND job_id IN
        <foreach collection="jobIdes" close=")" item="jobId" open="(" separator=",">
            ${jobId}
        </foreach>
        <if test="jobGroup gt 0">
            AND job_group = #{jobGroup}
        </if>
        AND `dispatch_sub` = #{oldDispatchSub}
    </update>

    <update id="updateDispatchSubBy">
        UPDATE gs_job_log
        SET `dispatch_sub` = #{newDispatchSub}
        WHERE `id` = #{logId}
          AND job_id = #{jobId}
          AND `job_group` = #{jobGroup}
          AND `dispatch_sub` = #{oldDispatchSub}
    </update>

    <select id="findFirstJobByInstance" resultType="int">
        SELECT t.job_id
        FROM gs_job_log AS t
        WHERE t.instance_id = #{instanceId}
          AND t.parent_log = 0
    </select>

    <select id="query10DelayExecute" parameterType="java.util.HashMap" resultMap="JobLog">
        SELECT
        <include refid="Base2_Column_List"/>
        FROM gs_job_log AS t
        WHERE t.job_group = #{jobGroup} AND
        t.trigger_code = 0 AND
        t.start_execute_time_in_ms <![CDATA[ > ]]> 0 AND
        t.start_execute_time_in_ms <![CDATA[ <= ]]> #{currentTime}
        limit 10
    </select>
</mapper>